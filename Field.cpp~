#include <fstream>
#include <cmath>
#include "Field.h"

using namespace std;

//Original: R 24, C 80
#define VIEW_ROWS 200      // dimensions of battlefield view
#define VIEW_COLS 150

#include "Man.h"
#include "Elf.h"
#include "Orc.h"
#include "Troll.h"





/*****
 *
 *  PRIVATE DATA MEMBERS:
 *
 *  - warrior: A partially filled array of Warrior objects, one for each
 *             living or dead warrior on the field.
 *
 *  - fill: The total number of living and dead warriors on the field.
 *
 *****/


/******************************************************************************
 * PROVIDED FUNCTIONS NOT TO BE ALTERED
 *****************************************************************************/

/*****
 *
 *  FUNCTION: Field constructor
 *
 *  PURPOSE: Initializes the field to empty.
 *
 *****/

Field::Field(): fill(0)
{
}


/*****
 *
 *  FUNCTION: write
 *
 *  PURPOSE: Displays a 2D representation of the field to the given output
 *           stream.
 *
 *  INPUT: out - the stream to which to write the field representation
 *
 *  OUTPUT out - the stream position has been updated
 *
 *  METHOD: - create a 2D "view" array, initialized to blank
 *          - for each living warrior on the field, add his symbol to the view
 *            at his given row/column coordinates
 *          - write the view array to the stream, one row ("line") at a time
 *
 *  NOTE: The battlefield has no borders!  Warriors can still be on the field
 *        but outside of the view frame.  In this case, they are still
 *        present but are invisible unless they move back into view.
 *
 *****/

void Field::write(ostream &out) const
{
  char view[VIEW_ROWS][VIEW_COLS];
  int row;
  int col;
  int index;     // index of each warrior

  for (row = 0; row < VIEW_ROWS; row++)
    for (col = 0; col < VIEW_COLS; col++)
      view[row][col] = ' ';

  for (index = 0; index < fill; index++)
    if (warrior[index]->is_alive())
      {
	warrior[index]->get_position(row, col);


	if (row >= 0 && row < VIEW_ROWS && col >= 0 && col < VIEW_COLS)
	  view[row][col] = warrior[index]->get_symbol();
      }

  for (row = 0; row < VIEW_ROWS; row++)
    {
      for (col = 0; col < VIEW_COLS; col++)
	out << view[row][col];

      out << endl;
    }
}


/*****
 *
 *  FUNCTION: find_nearest_opponent
 *
 *  PURPOSE: For a given warrior, returns the nearest living enemy warrior (or
 *           NULL if no such warrior).  The distance to the enemy warrior is
 *           also output.
 *
 *  INPUT: for_warrior - find the nearest opponent for this warrior
 *
 *  OUTPUT: distance - if opponent found, this is the distance between them
 *
 *  RETURN VALUE: opponent - the nearest opponent, or NULL if no such warrior
 *
 *  METHOD: for each living enemy warrior on field
 *               compute distance
 *               if closest so far then best candidate so far
 *
 *****/

Warrior *Field::find_nearest_opponent(const Warrior *for_warrior,
				      double &distance) const
{
  Warrior *opponent = NULL;
  int index;                    // index of each warrior to consider
  double opponent_distance;

  for (index = 0; index < fill; index++)
    if (warrior[index]->is_alive() &&
	warrior[index]->is_good() != for_warrior->is_good())
      {
	opponent_distance = distance_between(for_warrior, warrior[index]);

	if (opponent == NULL || opponent_distance < distance)
	  {
	    opponent = warrior[index];
	    distance = opponent_distance;
	  }
      }

  return opponent;
}


/*****
 *
 *  FUNCTION: collision
 *
 *  PURPOSE: For a given warrior, determines if the warrior is at at the same
 *           row/column coordinates as another living warrior (a "collision", 
 *           resulting from an illegal move).
 *
 *  INPUT: for_warrior - ask if this warrior has collided with any others
 *
 *  RETURN VALUE: collides - true if and only if warrior's row/column matches
 *                           another's
 *
 *  METHOD: for each other living warrior
 *               if row/col positions match then collision
 *
 *****/

bool Field::collision(const Warrior *for_warrior) const
{
  bool collides = false;
  int row;                   // row/column of for_warrior
  int col;
  int index;                 // index of other warrior to check
  int curr_row;              // row/column of other warrior
  int curr_col;

  for_warrior->get_position(row, col);

  for (index = 0; !collides && index < fill; index++)
    if (warrior[index] != for_warrior && warrior[index]->is_alive())
      {
	warrior[index]->get_position(curr_row, curr_col);
	collides = ((row == curr_row) && (col == curr_col));
      }

  return collides;
}


/*****
 *
 *  FUNCTION: distance_between
 *
 *  PURPOSE: Computes the distance between two warriors.
 *
 *  INPUT: w1 - a warrior
 *         w2 - a warrior
 *
 *  RETURN VALUE: the distance
 *
 *  METHOD: Applies the Pythagorean theorem based on each warrior's row/col
 *          coordinates.
 *
 *****/

double Field::distance_between(const Warrior * w1, const Warrior *w2) const
{
  int row1;
  int col1;
  int row2;
  int col2;
  double delta_row;
  double delta_col;

  w1->get_position(row1, col1);
  w2->get_position(row2, col2);

  delta_row = row1 - row2;
  delta_col = col1 - col2;

  return sqrt(delta_row * delta_row + delta_col * delta_col);
}


/******************************************************************************
 * PROVIDED FUNCTIONS TO BE ALTERED
 *****************************************************************************/

/*****
 *
 *  FUNCTION: load
 *
 *  PURPOSE: Loads an initial battlefield configuration from the named file, or
 *           returns false if the file is invalid.
 *
 *  INPUT: filename - the name of the file from which to read the configuration
 *
 *  RETURN VALUE: success - true if and only if a valid field file has been
 *                          loaded
 *
 *  METHOD: For each file input character (except space or newline), add a
 *          warrior of the given race ('M' for man, 'E' for elf, etc.) to the
 *          field at that row/column position, where each line in the file
 *          represents a row of columns.  Stop at EOF or when an invalid
 *          character (anything other than space, newline, 'M', 'E', 'O' or
 *          'T') is encountered.
 *
 *****/



bool Field::load(const char filename[])
{
  bool success = true;        
  ifstream file;
  int row;                     // the current row being filled
  int col;                     // the current column being filled
  char ch;                     
  bool bad_char = false;       // true when an invalid character has been read

  file.open(filename);

  
//  Man my_warrior(2, 3);     //not being initialized


  if (!file.fail())
    {
	row = 0;
	col = 0;
       	
	while (!file.eof()) {
	    
	    file.get(ch);


	    if ((ch == ' ') || (ch == '\n') || (ch == 'M') || (ch == 'E') || 
		(ch == 'O') || (ch == 'T'))
	    {

		if (ch == ' ') {
		    col++;                 //new collumn when a space is read

		}
		
		else if (ch == '\n'){
		    row++;         //a new line, so back to collumn = 0
		    col = 0;
		
		}
		
		else {  
		    

		    if (fill < 1000) {


			if (ch == 'M')
			    warrior[fill] = new Man(row, col);
			
			if (ch == 'E')
			    warrior[fill] = new Elf(row, col);
			
			if (ch == 'O')
			    warrior[fill] = new Orc(row, col);
			
			if (ch == 'T')
			    warrior[fill] = new Troll(row, col);
			

			col++;  
			fill++;
		    }
		    else
			success = false;

		}
	    }
	    else
		bad_char = true;
	 	    
	}
	
	if (bad_char)
	    success = false;
    }

  else {
      cout << "Could not open file";
      success = false;
  }


  
  return success;
}


/*****
 *
 *  FUNCTION: evolve
 *
 *  PURPOSE: Updates the field by giving each warrior a turn to attack or
 *           move.
 *
 *  METHOD: For each warrior pointed to by the "warrior" array, tell it to
 *          take a turn.
 *
 *  NOTE: The turn order is determined by the order of the array elements,
 *        which is determined by the order warriors are loaded from the
 *        initial battlefield file.  Although this is slighty unfair, it is
 *        a sufficient method for now.
 *
 *****/

void Field::evolve()
{

    int counter = 0;

    Warrior *curr;   //current warrior taking its turn
    
    for (counter = 0; counter < fill; counter++)  {  
	
	curr = warrior[counter];  
	(*curr).take_turn(*this);
	
    }
        
    return;
}


/*****
 *
 *  FUNCTION: get_num_warriors
 *
 *  PURPOSE: Counts the number of living good and evil warriors.
 *
 *  OUTPUT: good - the number of living good warriors
 *          evil - the number of living evil warriors
 *
 *****/

void Field::get_num_warriors(int &good, int &evil) const
{

    int counter = 0;
    Warrior *curr;

    good = 0;
    evil = 0;


    
    for (counter = 0; counter < fill; counter++) {
	
	curr = warrior[counter];

	if ((*curr).is_alive()) {   //warrior must be alive to be counted
	    
	    if ((*curr).is_good())
		
		good++;
	    
	    else
		evil++;
	}
	  
    }  

    return;

}


/******************************************************************************
 * ADD NEW FUNCTIONS HERE
 *****************************************************************************/


/*****
 *
 *  FUNCTION: Field Destructor
 *
 *  PURPOSE: reallocates memory to the heap, by deleting the warriors in
 *           the field. Also makes and writes a file containing the number
 *           of good warrior, bad warriors, and each warriors location
 *
 *  OUTPUT:  the file: end_world.txt with the warrior information 
 *          
 *
 *****/

Field ::~Field(){
    
    int counter = 0;
    Warrior *wptr;    //used to traverse the warriors
    
    ofstream out;
    
    int good = 0;
    int evil = 0;
    
    int row;
    int col;
    
    out.open("end_world.txt");
    
    get_num_warriors(good, evil);
    
    out << good << ' ' << evil << endl;  //prints the good and evil warriors
    
    
    for (counter = 0; counter < fill; counter++) {
	
	
	wptr = warrior[counter];
	
	if ((*wptr).is_alive())    //Prints the warrior if it is alive
	{

	    (*wptr).get_position(row,col);	
	    
	    out << (*wptr).get_symbol() << ' ' <<  row << ' ' << col << endl; 
	}

	delete wptr;               //memory is reallocated
	warrior[counter] = NULL;  
    } 
    
    out.close();
}

/*****
 *
 *  FUNCTION: Field Constructor
 *
 *  PURPOSE:  Copies the content of one field to another on delcarization
 *
 *  OUTPUT:   An identical field to the field it is set to.
 *          
 *
 *****/



//Remember: field. is the old one

Field::Field(const Field& field){

    Warrior *curr;   //used to traverse the warrior array
    Warrior *new_warrior;
    int counter;

    //copies all warriors
    for (counter = 0; counter < field.fill; counter++){

	curr = field.warrior[counter];

	new_warrior = (*curr).clone();

	(*new_warrior) = (*curr);      //sets warrior position correctly

	warrior[counter] = new_warrior;

    }    
    fill = field.fill;  //new array gets the fill size of the old one


    return;
}




/*****
 *
 *  FUNCTION: Overriden copy 
 *
 *  PURPOSE:  Copies the content of one field to another when using '='
 *
 *  OUTPUT:   An identical field to the field it is set to.
 *          
 *
 *****/



//field is the old one
Field& Field :: operator = (const Field& field){
    
    Warrior *new_warrior;
    Warrior *wptr;
    int counter = 0;
    


    if (this != &field)  //checks if both fields are already the same
    {

	for (counter = 0; counter < this->fill; counter++) { 
	    
	    wptr = this->warrior[counter];
	    delete wptr;                   //deletes all warriors
	    warrior[counter] = NULL;
	}
    }

    for (counter = 0; counter < field.fill; counter++) {

	wptr = field.warrior[counter];

	new_warrior = (*wptr).clone();
	
	(*new_warrior) = (*wptr);
    
	this->warrior[counter] = new_warrior;

    }

    this->fill = field.fill;    
    
    return (*this);          //the new copy is returned
}



/*****
 *
 *  FUNCTION: << overloader
 *
 *  PURPOSE:  overloads << so that it is able to print out a field by 
 *            doing << <field>
 *
 *  OUTPUT:   Field is printed to the stream of choice
 *          
 *
 *****/

ostream& operator << (ostream& out, const Field& field){      
    
    field.write(out);
    
    return out;
    
}
